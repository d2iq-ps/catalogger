"""
Script:     Catalogger App
Developer:  Dave Whitehouse - D2IQ Solutions Architect
Contact:    @dwhitehouse
Date:       7 Oct 22
Summary:    A class that defines a connection to Github based on repo username and a token
"""

from github import Github
from flask import session, request, redirect, url_for
from pathlib import Path

class GithubRepo:
    def __init__(self, username, token, repo_name):
        self.token = token
        self.username = username
        self.repo_name = repo_name
        # self.org = 'swiftsuretech'
        self.commit_message = "Initial Commit - Generated by catalogger application"
        
    def check_creds(self):
        try:
            self.g = Github(self.token)
            self.user = self.g.get_user(self.username)
            self.repos = self.user.get_repos()
            return True
        except Exception as e:
            return False

 
    def init(self, repo_name, layout_dir = "/app/custom_catalogue"):
        # Try to create the repo. If not return false
        commit_msg = "Auto generated by custom catalogue builder"
        try:
            self.g = Github(self.token)
            self.auth_user = self.g.get_user()
            self.repo = self.auth_user.create_repo(repo_name)
        except Exception as e:
            print(e.data['errors'][0]['message'])
            self.repo = self.auth_user.get_repo(repo_name)
            return e.data['message']
        # Generate a list of files to push
        to_push = []
        for file in list(Path(layout_dir).rglob('*.yaml')):
            to_push.append(file)
        for file in list(Path(layout_dir).rglob('*.md')):
            to_push.append(file)
        # Push files to github
        counter = 0
        for push in to_push:
            try:
                with open(push, "rb") as p:
                    content = p.read().decode("utf-8")
                    path = '/'.join(push._str.split('/')[3:10])
                    self.repo.create_file(path, commit_msg, content, 'master')
                counter = counter + 1
            except Exception as e:
                continue
        if counter > 0:
            return f"All files pushed to Github repo \"{session['gh_repo_name']}\""
        else:
            return "Files were not pushed. Ensure that the repo and files don't already exist and try again"

    def get_repos(self):
        try:
            self.repos = self.user.get_repos()
            return self.repos
        except:
            return False
            
    def create_repo(self):
        try:
            self.repo = self.user.create_repo(self.repo_name)
            return True
        except:
            return False

    def push(self):
        try:
            self.repo.index.commit(self.commit_message)
            return True
        except Exception as e:
            return False

def connect_github():
    github_vars={"gh_username": "", "gh_token": "", "gh_repo": ""}
    for key, value in request.form.items():
        github_vars[key]=value
    c = GithubRepo(github_vars['gh_username'], github_vars['gh_token'], github_vars['gh_repo'])
    if c.check_creds():
        print("Connected to Github")
        session['gh_repo_name'] = github_vars['gh_repo']
        session['gh_form_state'] = "disabled"
        session['gh_connected'] = "text-success"
        session['gh_status_message']  = f"Connected to {github_vars['gh_username']}"
        session['gh_status_colour'] = "text-success"
        session['gh_creds'] = github_vars
        session['gh_repo_tmp'] = github_vars['gh_repo']
        session['gh_url_tmp'] = f"https://github.com/{github_vars['gh_username']}/{github_vars['gh_repo']}"
        return c
    else:
        session['gh_form_state'] = ""
        session['gh_connected'] = "text-grey"
        session['gh_status_message']  = f"Not Connected to a repo"
        session['gh_status_colour'] = "text-danger"
        print("Failed to connect to Github")
        
def repo_init(repo='my-custom-catalogue'):
    c = GithubRepo(session['gh_creds']['gh_username'], session['gh_creds']['gh_token'], session['gh_creds']['gh_repo'])
    return c.init(repo)

if __name__ == '__main__':
    repo_init()
